{"version":3,"file":"app/api/rubrics/generate/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./src/app/api/rubrics/generate/route.ts","webpack://_N_E/./src/app/api/rubrics/generate/route.ts?8dcf","webpack://_N_E/?ed78","webpack://_N_E/./src/lib/auth.ts","webpack://_N_E/./src/lib/db.ts","webpack://_N_E/./src/lib/openai.ts","webpack://_N_E/<anon>"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { auth } from '@/lib/auth';\nimport { openai } from '@/lib/openai';\nimport { db } from '@/lib/db';\nimport { NextResponse } from 'next/server';\n\nexport const runtime = 'edge';\n\ninterface RubricResponse {\n  rubric: {\n    criteria: Array<{\n      name: string;\n      levels: {\n        destacado: string;\n        satisfactorio: string;\n        enProceso: string;\n        inicial: string;\n      };\n    }>;\n  };\n}\n\nexport async function POST(req: Request) {\n  try {\n    const session = await auth();\n    if (!session?.user?.id) {\n      return new NextResponse('Unauthorized', { status: 401 });\n    }\n\n    const body = await req.json();\n    const { title, grade, subject, criteria } = body;\n\n    if (!title || !grade || !subject || !criteria) {\n      return new NextResponse('Missing required fields', { status: 400 });\n    }\n\n    // Format criteria for the prompt\n    const formattedCriteria = criteria\n      .map((c: { name: string; description: string }) => `${c.name}: ${c.description}`)\n      .join('\\n');\n\n    const prompt = `Por favor, genera una rúbrica de evaluación detallada para ${title} en el grado ${grade} de primaria para la asignatura de ${subject}.\n\nLos criterios a evaluar son:\n${formattedCriteria}\n\nPara cada criterio, genera 4 niveles de desempeño:\n- Destacado (4 puntos)\n- Satisfactorio (3 puntos)\n- En proceso (2 puntos)\n- Inicial (1 punto)\n\nFormato de respuesta:\n{\n  \"rubric\": {\n    \"criteria\": [\n      {\n        \"name\": \"Nombre del criterio\",\n        \"levels\": {\n          \"destacado\": \"Descripción del nivel destacado\",\n          \"satisfactorio\": \"Descripción del nivel satisfactorio\",\n          \"enProceso\": \"Descripción del nivel en proceso\",\n          \"inicial\": \"Descripción del nivel inicial\"\n        }\n      }\n    ]\n  }\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4-turbo-preview\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"Eres un experto en educación especializado en la creación de rúbricas de evaluación. Tus respuestas deben ser claras, específicas y adecuadas para el nivel educativo indicado.\"\n        },\n        {\n          role: \"user\",\n          content: prompt\n        }\n      ],\n      response_format: { type: \"json_object\" }\n    });\n\n    const content = response.choices[0]?.message?.content;\n    if (!content) {\n      throw new Error('No content received from OpenAI');\n    }\n\n    let generatedContent: RubricResponse;\n    try {\n      generatedContent = JSON.parse(content);\n    } catch (error) {\n      console.error('[JSON_PARSE_ERROR]', error);\n      return new NextResponse('Invalid response format', { status: 500 });\n    }\n\n    // Save the rubric to the database\n    const rubric = await db.rubric.create({\n      data: {\n        userId: session.user.id,\n        title,\n        subject,\n        grade,\n        criteria: JSON.stringify(criteria),\n        content,\n      },\n    });\n\n    return NextResponse.json(rubric);\n  } catch (error) {\n    console.error('[RUBRIC_GENERATION_ERROR]', error);\n    return new NextResponse('Internal Error', { status: 500 });\n  }\n} ","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Users/paulsilva/Documents/demo-02/src/app/api/rubrics/generate/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/rubrics/generate/route\",\n        pathname: \"/api/rubrics/generate\",\n        filename: \"route\",\n        bundlePath: \"app/api/rubrics/generate/route\"\n    },\n    resolvedPagePath: \"/Users/paulsilva/Documents/demo-02/src/app/api/rubrics/generate/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/rubrics/generate/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Frubrics%2Fgenerate%2Froute&page=%2Fapi%2Frubrics%2Fgenerate%2Froute&pagePath=private-next-app-dir%2Fapi%2Frubrics%2Fgenerate%2Froute.ts&appDir=%2FUsers%2Fpaulsilva%2FDocuments%2Fdemo-02%2Fsrc%2Fapp&appPaths=%2Fapi%2Frubrics%2Fgenerate%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/rubrics/generate/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map","import { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { db } from \"@/lib/db\";\nimport bcrypt from \"bcryptjs\";\nimport NextAuth from \"next-auth\";\nimport type { NextAuthConfig } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport type { User } from \"@prisma/client\";\n\ndeclare module \"next-auth\" {\n  interface Session {\n    user: {\n      id: string;\n      name?: string | null;\n      email?: string | null;\n      image?: string | null;\n    };\n  }\n}\n\nexport const config = {\n  adapter: PrismaAdapter(db),\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error(\"Invalid credentials\");\n        }\n\n        const email = credentials.email as string;\n        const password = credentials.password as string;\n\n        const user = await db.user.findUnique({\n          where: { email }\n        });\n\n        if (!user || !user?.hashedPassword) {\n          throw new Error(\"User not found\");\n        }\n\n        const isCorrectPassword = await bcrypt.compare(\n          password,\n          user.hashedPassword\n        );\n\n        if (!isCorrectPassword) {\n          throw new Error(\"Invalid password\");\n        }\n\n        return {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          image: user.image,\n        };\n      }\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n  ],\n  pages: {\n    signIn: '/auth/login',\n  },\n  session: {\n    strategy: \"jwt\"\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.id as string;\n      }\n      return session;\n    },\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n} satisfies NextAuthConfig;\n\nexport const { auth, handlers: { GET, POST }, signIn, signOut } = NextAuth(config);\n\nexport async function getCurrentUser() {\n  try {\n    const session = await auth();\n    return session?.user;\n  } catch (error) {\n    console.error('Error getting current user:', error);\n    return null;\n  }\n}","import { PrismaClient } from '@prisma/client';\n\ndeclare global {\n  var cachedPrisma: PrismaClient;\n}\n\nlet prisma: PrismaClient;\nif (process.env.NODE_ENV === 'production') {\n  prisma = new PrismaClient();\n} else {\n  if (!global.cachedPrisma) {\n    global.cachedPrisma = new PrismaClient();\n  }\n  prisma = global.cachedPrisma;\n}\n\nexport const db = prisma; ","import OpenAI from 'openai';\n\nif (!process.env.OPENAI_API_KEY) {\n  throw new Error('Missing OPENAI_API_KEY environment variable');\n}\n\nexport const openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n}); "],"names":["module","exports","require","runtime","POST","req","session","auth","user","id","NextResponse","status","title","grade","subject","criteria","json","formattedCriteria","map","c","name","description","join","prompt","response","openai","chat","completions","create","model","messages","role","content","response_format","type","choices","message","JSON","parse","error","console","rubric","db","data","userId","stringify","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","headerHooks","staticGenerationBailout","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Frubrics_2Fgenerate_2Froute_ts_page_2Fapi_2Frubrics_2Fgenerate_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGcnVicmljcyUyRmdlbmVyYXRlJTJGcm91dGUmcGFnZT0lMkZhcGklMkZydWJyaWNzJTJGZ2VuZXJhdGUlMkZyb3V0ZSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnJ1YnJpY3MlMkZnZW5lcmF0ZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnBhdWxzaWx2YSUyRkRvY3VtZW50cyUyRmRlbW8tMDIlMkZzcmMlMkZhcHAmYXBwUGF0aHM9JTJGYXBpJTJGcnVicmljcyUyRmdlbmVyYXRlJTJGcm91dGUmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0Qh_nextConfigOutput_preferredRegion_middlewareConfig_e30_3D_","edge_route_module_wrapper","a","wrap","config","adapter","PrismaAdapter","providers","CredentialsProvider","credentials","email","label","password","authorize","findUnique","where","hashedPassword","bcrypt","image","GoogleProvider","clientId","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","pages","signIn","strategy","callbacks","jwt","token","secret","NEXTAUTH_SECRET","handlers","GET","signOut","NextAuth","PrismaClient","OPENAI_API_KEY","OpenAI","apiKey"],"sourceRoot":""}