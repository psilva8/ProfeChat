{"version":3,"file":"app/api/lesson-plans/route.js","mappings":"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","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./src/app/api/lesson-plans/route.ts","webpack://_N_E/./src/app/api/lesson-plans/route.ts?c0c8","webpack://_N_E/","webpack://_N_E/./src/lib/auth.ts","webpack://_N_E/./src/lib/db.ts","webpack://_N_E/<anon>"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { NextResponse } from 'next/server';\nimport { auth } from '@/lib/auth';\nimport { db } from '@/lib/db';\n\nexport const runtime = 'edge';\nexport const dynamic = 'force-dynamic';\n\nexport async function GET() {\n  try {\n    const session = await auth();\n    if (!session?.user) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const lessonPlans = await db.lessonPlan.findMany({\n      where: {\n        userId: session.user.id,\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    });\n\n    return NextResponse.json(lessonPlans);\n  } catch (error) {\n    console.error('Error fetching lesson plans:', error);\n    return NextResponse.json(\n      { error: 'Internal Server Error' },\n      { status: 500 }\n    );\n  }\n} ","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Users/paulsilva/Documents/demo-02/src/app/api/lesson-plans/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/lesson-plans/route\",\n        pathname: \"/api/lesson-plans\",\n        filename: \"route\",\n        bundlePath: \"app/api/lesson-plans/route\"\n    },\n    resolvedPagePath: \"/Users/paulsilva/Documents/demo-02/src/app/api/lesson-plans/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/lesson-plans/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Flesson-plans%2Froute&page=%2Fapi%2Flesson-plans%2Froute&pagePath=private-next-app-dir%2Fapi%2Flesson-plans%2Froute.ts&appDir=%2FUsers%2Fpaulsilva%2FDocuments%2Fdemo-02%2Fsrc%2Fapp&appPaths=%2Fapi%2Flesson-plans%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/lesson-plans/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map","import { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { db } from \"@/lib/db\";\nimport bcrypt from \"bcryptjs\";\nimport NextAuth from \"next-auth\";\nimport type { NextAuthConfig } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport type { User } from \"@prisma/client\";\n\ndeclare module \"next-auth\" {\n  interface Session {\n    user: {\n      id: string;\n      name?: string | null;\n      email?: string | null;\n      image?: string | null;\n    };\n  }\n}\n\nexport const config = {\n  adapter: PrismaAdapter(db),\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error(\"Invalid credentials\");\n        }\n\n        const email = credentials.email as string;\n        const password = credentials.password as string;\n\n        const user = await db.user.findUnique({\n          where: { email }\n        });\n\n        if (!user || !user?.hashedPassword) {\n          throw new Error(\"User not found\");\n        }\n\n        const isCorrectPassword = await bcrypt.compare(\n          password,\n          user.hashedPassword\n        );\n\n        if (!isCorrectPassword) {\n          throw new Error(\"Invalid password\");\n        }\n\n        return {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          image: user.image,\n        };\n      }\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n  ],\n  pages: {\n    signIn: '/auth/login',\n  },\n  session: {\n    strategy: \"jwt\"\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.id as string;\n      }\n      return session;\n    },\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n} satisfies NextAuthConfig;\n\nexport const { auth, handlers: { GET, POST }, signIn, signOut } = NextAuth(config);\n\nexport async function getCurrentUser() {\n  try {\n    const session = await auth();\n    return session?.user;\n  } catch (error) {\n    console.error('Error getting current user:', error);\n    return null;\n  }\n}","import { PrismaClient } from '@prisma/client';\n\ndeclare global {\n  var cachedPrisma: PrismaClient;\n}\n\nlet prisma: PrismaClient;\nif (process.env.NODE_ENV === 'production') {\n  prisma = new PrismaClient();\n} else {\n  if (!global.cachedPrisma) {\n    global.cachedPrisma = new PrismaClient();\n  }\n  prisma = global.cachedPrisma;\n}\n\nexport const db = prisma; "],"names":["module","exports","require","runtime","dynamic","GET","session","auth","user","NextResponse","json","error","status","lessonPlans","db","lessonPlan","findMany","where","userId","id","orderBy","createdAt","console","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","headerHooks","staticGenerationBailout","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Flesson_plans_2Froute_ts_page_2Fapi_2Flesson_plans_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGbGVzc29uLXBsYW5zJTJGcm91dGUmcGFnZT0lMkZhcGklMkZsZXNzb24tcGxhbnMlMkZyb3V0ZSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmxlc3Nvbi1wbGFucyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnBhdWxzaWx2YSUyRkRvY3VtZW50cyUyRmRlbW8tMDIlMkZzcmMlMkZhcHAmYXBwUGF0aHM9JTJGYXBpJTJGbGVzc29uLXBsYW5zJTJGcm91dGUmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0Qh_nextConfigOutput_preferredRegion_middlewareConfig_e30_3D_","edge_route_module_wrapper","a","wrap","config","adapter","PrismaAdapter","providers","CredentialsProvider","name","credentials","email","label","type","password","authorize","findUnique","hashedPassword","bcrypt","image","GoogleProvider","clientId","process","env","GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","pages","signIn","strategy","callbacks","jwt","token","secret","NEXTAUTH_SECRET","handlers","POST","signOut","NextAuth","PrismaClient"],"sourceRoot":""}